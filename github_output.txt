Run terraform plan -input=false -no-color
data.archive_file.auth_ready_zip: Reading...
data.archive_file.auth_ready_zip: Read complete after 0s [id=be0d82ce8d07a2d2a308701c6ec2b8958a6448ef]
data.aws_caller_identity.current: Reading...
data.aws_caller_identity.current: Read complete after 0s [id=834076182408]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform planned the following actions, but then encountered a problem:

  # aws_apprunner_service.main_services["auth-service"] will be created
  + resource "aws_apprunner_service" "main_services" {
      + arn                            = (known after apply)
      + auto_scaling_configuration_arn = (known after apply)
      + id                             = (known after apply)
      + service_id                     = (known after apply)
      + service_name                   = "madeinworld-auth-service-dev"
      + service_url                    = (known after apply)
      + status                         = (known after apply)
      + tags                           = {
          + "Phase"   = "1"
          + "Project" = "madeinworld"
        }
      + tags_all                       = {
          + "Phase"   = "1"
          + "Project" = "madeinworld"
        }

      + health_check_configuration {
          + healthy_threshold   = 1
          + interval            = 5
          + path                = "/live"
          + protocol            = "HTTP"
          + timeout             = 2
          + unhealthy_threshold = 5
        }

      + instance_configuration {
          + cpu               = "1024"
          + instance_role_arn = (known after apply)
          + memory            = "2048"
        }

      + network_configuration (known after apply)

      + source_configuration {
          + auto_deployments_enabled = true

          + authentication_configuration {
              + access_role_arn = (known after apply)
            }

          + image_repository {
              + image_identifier      = "834076182408.dkr.ecr.***.amazonaws.com/madeinworld/auth-service:latest"
              + image_repository_type = "ECR"

              + image_configuration {
                  + port                          = "8081"
                  + runtime_environment_secrets   = {
                      + "AWS_ACCESS_KEY_ID"     = (sensitive value)
                      + "AWS_SECRET_ACCESS_KEY" = (sensitive value)
                      + "DB_PASSWORD"           = (sensitive value)
                      + "JWT_SECRET"            = (sensitive value)
                    }
                  + runtime_environment_variables = {
                      + "ADMIN_EMAIL"        = "expotobsrl@gmail.com"
                      + "AWS_DEFAULT_REGION" = "***"
                      + "DB_HOST"            = (sensitive value)
                      + "DB_NAME"            = "***"
                      + "DB_PORT"            = "5432"
                      + "DB_SSLMODE"         = "require"
                      + "DB_USER"            = (sensitive value)
                      + "GIN_MODE"           = "release"
                      + "PORT"               = "8081"
                      + "SES_FROM_EMAIL"     = null
                    }
                }
            }
        }
    }

  # aws_apprunner_service.main_services["catalog-service"] will be created
  + resource "aws_apprunner_service" "main_services" {
      + arn                            = (known after apply)
      + auto_scaling_configuration_arn = (known after apply)
      + id                             = (known after apply)
      + service_id                     = (known after apply)
      + service_name                   = "madeinworld-catalog-service-dev"
      + service_url                    = (known after apply)
      + status                         = (known after apply)
      + tags                           = {
          + "Phase"   = "1"
          + "Project" = "madeinworld"
        }
      + tags_all                       = {
          + "Phase"   = "1"
          + "Project" = "madeinworld"
        }

      + health_check_configuration {
          + healthy_threshold   = 1
          + interval            = 5
          + path                = "/live"
          + protocol            = "HTTP"
          + timeout             = 2
          + unhealthy_threshold = 5
        }

      + instance_configuration {
          + cpu               = "1024"
          + instance_role_arn = (known after apply)
          + memory            = "2048"
        }

      + network_configuration (known after apply)

      + source_configuration {
          + auto_deployments_enabled = true

          + authentication_configuration {
              + access_role_arn = (known after apply)
            }

          + image_repository {
              + image_identifier      = "834076182408.dkr.ecr.***.amazonaws.com/madeinworld/catalog-service:latest"
              + image_repository_type = "ECR"

              + image_configuration {
                  + port                          = "8080"
                  + runtime_environment_secrets   = {
                      + "AWS_ACCESS_KEY_ID"     = (sensitive value)
                      + "AWS_SECRET_ACCESS_KEY" = (sensitive value)
                      + "DB_PASSWORD"           = (sensitive value)
                      + "JWT_SECRET"            = (sensitive value)
                    }
                  + runtime_environment_variables = {
                      + "AWS_DEFAULT_REGION" = "***"
                      + "DB_HOST"            = (sensitive value)
                      + "DB_NAME"            = "***"
                      + "DB_PORT"            = "5432"
                      + "DB_SSLMODE"         = "require"
                      + "DB_USER"            = (sensitive value)
                      + "GIN_MODE"           = "release"
                      + "PORT"               = "8080"
                      + "SERVICE_BASE_URL"   = "https://device-api.expomadeinworld.com"
                      + "SES_FROM_EMAIL"     = null
                    }
                }
            }
        }
    }

  # aws_apprunner_service.main_services["order-service"] will be created
  + resource "aws_apprunner_service" "main_services" {
      + arn                            = (known after apply)
      + auto_scaling_configuration_arn = (known after apply)
      + id                             = (known after apply)
      + service_id                     = (known after apply)
      + service_name                   = "madeinworld-order-service-dev"
      + service_url                    = (known after apply)
      + status                         = (known after apply)
      + tags                           = {
          + "Phase"   = "1"
          + "Project" = "madeinworld"
        }
      + tags_all                       = {
          + "Phase"   = "1"
          + "Project" = "madeinworld"
        }

      + health_check_configuration {
          + healthy_threshold   = 1
          + interval            = 5
          + path                = "/live"
          + protocol            = "HTTP"
          + timeout             = 2
          + unhealthy_threshold = 5
        }

      + instance_configuration {
          + cpu               = "1024"
          + instance_role_arn = (known after apply)
          + memory            = "2048"
        }

      + network_configuration (known after apply)

      + source_configuration {
          + auto_deployments_enabled = true

          + authentication_configuration {
              + access_role_arn = (known after apply)
            }

          + image_repository {
              + image_identifier      = "834076182408.dkr.ecr.***.amazonaws.com/madeinworld/order-service:latest"
              + image_repository_type = "ECR"

              + image_configuration {
                  + port                          = "8082"
                  + runtime_environment_secrets   = {
                      + "AWS_ACCESS_KEY_ID"     = (sensitive value)
                      + "AWS_SECRET_ACCESS_KEY" = (sensitive value)
                      + "DB_PASSWORD"           = (sensitive value)
                      + "JWT_SECRET"            = (sensitive value)
                    }
                  + runtime_environment_variables = {
                      + "AWS_DEFAULT_REGION" = "***"
                      + "DB_HOST"            = (sensitive value)
                      + "DB_NAME"            = "***"
                      + "DB_PORT"            = "5432"
                      + "DB_SSLMODE"         = "require"
                      + "DB_USER"            = (sensitive value)
                      + "GIN_MODE"           = "release"
                      + "PORT"               = "8082"
                      + "SES_FROM_EMAIL"     = null
                    }
                }
            }
        }
    }

  # aws_apprunner_service.main_services["user-service"] will be created
  + resource "aws_apprunner_service" "main_services" {
      + arn                            = (known after apply)
      + auto_scaling_configuration_arn = (known after apply)
      + id                             = (known after apply)
      + service_id                     = (known after apply)
      + service_name                   = "madeinworld-user-service-dev"
      + service_url                    = (known after apply)
      + status                         = (known after apply)
      + tags                           = {
          + "Phase"   = "1"
          + "Project" = "madeinworld"
        }
      + tags_all                       = {
          + "Phase"   = "1"
          + "Project" = "madeinworld"
        }

      + health_check_configuration {
          + healthy_threshold   = 1
          + interval            = 5
          + path                = "/live"
          + protocol            = "HTTP"
          + timeout             = 2
          + unhealthy_threshold = 5
        }

      + instance_configuration {
          + cpu               = "1024"
          + instance_role_arn = (known after apply)
          + memory            = "2048"
        }

      + network_configuration (known after apply)

      + source_configuration {
          + auto_deployments_enabled = true

          + authentication_configuration {
              + access_role_arn = (known after apply)
            }

          + image_repository {
              + image_identifier      = "834076182408.dkr.ecr.***.amazonaws.com/madeinworld/user-service:latest"
              + image_repository_type = "ECR"

              + image_configuration {
                  + port                          = "8083"
                  + runtime_environment_secrets   = {
                      + "AWS_ACCESS_KEY_ID"     = (sensitive value)
                      + "AWS_SECRET_ACCESS_KEY" = (sensitive value)
                      + "DB_PASSWORD"           = (sensitive value)
                      + "JWT_SECRET"            = (sensitive value)
                    }
                  + runtime_environment_variables = {
                      + "AWS_DEFAULT_REGION" = "***"
                      + "DB_HOST"            = (sensitive value)
                      + "DB_NAME"            = "***"
                      + "DB_PORT"            = "5432"
                      + "DB_SSLMODE"         = "require"
                      + "DB_USER"            = (sensitive value)
                      + "GIN_MODE"           = "release"
                      + "PORT"               = "8083"
                      + "SES_FROM_EMAIL"     = null
                    }
                }
            }
        }
    }

  # aws_ecr_repository.service_repos["auth-service"] will be created
  + resource "aws_ecr_repository" "service_repos" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "madeinworld/auth-service"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = (known after apply)

      + image_scanning_configuration {
          + scan_on_push = true
        }
    }

  # aws_ecr_repository.service_repos["catalog-service"] will be created
  + resource "aws_ecr_repository" "service_repos" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "madeinworld/catalog-service"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = (known after apply)

      + image_scanning_configuration {
          + scan_on_push = true
        }
    }

  # aws_ecr_repository.service_repos["order-service"] will be created
  + resource "aws_ecr_repository" "service_repos" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "madeinworld/order-service"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = (known after apply)

      + image_scanning_configuration {
          + scan_on_push = true
        }
    }

  # aws_ecr_repository.service_repos["user-service"] will be created
  + resource "aws_ecr_repository" "service_repos" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "madeinworld/user-service"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = (known after apply)

      + image_scanning_configuration {
          + scan_on_push = true
        }
    }

  # aws_iam_policy.apprunner_secrets_policy will be created
  + resource "aws_iam_policy" "apprunner_secrets_policy" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + id               = (known after apply)
      + name             = "madeinworld-apprunner-secrets-policy"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = (sensitive value)
      + policy_id        = (known after apply)
      + tags_all         = (known after apply)
    }

  # aws_iam_role.apprunner_ecr_access_role will be created
  + resource "aws_iam_role" "apprunner_ecr_access_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "build.apprunner.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "madeinworld-apprunner-ecr-access-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # aws_iam_role.apprunner_instance_role will be created
  + resource "aws_iam_role" "apprunner_instance_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "tasks.apprunner.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "madeinworld-apprunner-instance-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # aws_iam_role.synthetics_role will be created
  + resource "aws_iam_role" "synthetics_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                    },
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "synthetics.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "madeinworld-synthetics-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # aws_iam_role_policy_attachment.apprunner_ecr_access will be created
  + resource "aws_iam_role_policy_attachment" "apprunner_ecr_access" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess"
      + role       = "madeinworld-apprunner-ecr-access-role"
    }

  # aws_iam_role_policy_attachment.apprunner_secrets_access will be created
  + resource "aws_iam_role_policy_attachment" "apprunner_secrets_access" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "madeinworld-apprunner-instance-role"
    }

  # aws_iam_role_policy_attachment.lambda_basic will be created
  + resource "aws_iam_role_policy_attachment" "lambda_basic" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      + role       = "madeinworld-synthetics-role"
    }

  # aws_iam_role_policy_attachment.s3_rw will be created
  + resource "aws_iam_role_policy_attachment" "s3_rw" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      + role       = "madeinworld-synthetics-role"
    }

  # aws_iam_role_policy_attachment.synthetics_full_access will be created
  + resource "aws_iam_role_policy_attachment" "synthetics_full_access" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/CloudWatchSyntheticsFullAccess"
      + role       = "madeinworld-synthetics-role"
    }

  # aws_s3_bucket.synthetics_artifacts will be created
  + resource "aws_s3_bucket" "synthetics_artifacts" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "madeinworld-synthetics-artifacts"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = true
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags_all                    = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # aws_s3_object.canary_code will be created
  + resource "aws_s3_object" "canary_code" {
      + acl                    = (known after apply)
      + arn                    = (known after apply)
      + bucket                 = "madeinworld-synthetics-artifacts"
      + bucket_key_enabled     = (known after apply)
      + checksum_crc32         = (known after apply)
      + checksum_crc32c        = (known after apply)
      + checksum_crc64nvme     = (known after apply)
      + checksum_sha1          = (known after apply)
      + checksum_sha256        = (known after apply)
      + content_type           = (known after apply)
      + etag                   = "6f15b55b9e9c424f9f39ecaebcf4e454"
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "canaries/auth_ready.zip"
      + kms_key_id             = (known after apply)
      + server_side_encryption = (known after apply)
      + source                 = "./auth_ready.zip"
      + storage_class          = (known after apply)
      + tags_all               = (known after apply)
      + version_id             = (known after apply)
    }

Plan: 19 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + service_urls = {
      + auth-service    = (known after apply)
      + catalog-service = (known after apply)
      + order-service   = (known after apply)
      + user-service    = (known after apply)
    }

Error: Conflicting configuration arguments

  with aws_synthetics_canary.auth_ready,
  on canary.tf line 49, in resource "aws_synthetics_canary" "auth_ready":
  49:   zip_file             = data.archive_file.auth_ready_zip.output_path

"zip_file": conflicts with s3_bucket

Error: Conflicting configuration arguments

  with aws_synthetics_canary.auth_ready,
  on canary.tf line 63, in resource "aws_synthetics_canary" "auth_ready":
  63:   s3_bucket  = aws_s3_bucket.synthetics_artifacts.bucket

"s3_bucket": conflicts with zip_file

Error: Conflicting configuration arguments

  with aws_synthetics_canary.auth_ready,
  on canary.tf line 64, in resource "aws_synthetics_canary" "auth_ready":
  64:   s3_key     = aws_s3_object.canary_code.key

"s3_key": conflicts with zip_file
Error: Terraform exited with code 1.
Error: Process completed with exit code 1.