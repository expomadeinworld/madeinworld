# .github/workflows/deploy-app-runner.yml

name: Deploy Services to App Runner

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  id-token: write # Required for OIDC
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth-service, catalog-service, order-service, user-service]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: madeinworld/${{ matrix.service }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend/${{ matrix.service }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Ensure App Runner deployment
        env:
          SERVICE_NAME: madeinworld-${{ matrix.service }}-dev
        run: |
          set -e
          ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$SERVICE_NAME'].ServiceArn | [0]" --output text)
          if [ -z "$ARN" ] || [ "$ARN" = "None" ]; then
            echo "No App Runner service found for $SERVICE_NAME" >&2
            exit 1
          fi
          echo "Service ARN: $ARN"
          echo "Waiting for service to be RUNNING (will poll up to 10 minutes)"
          for i in {1..60}; do
            STATUS=$(aws apprunner describe-service --service-arn "$ARN" --query "Service.Status" --output text)
            echo "[$i] Status: $STATUS"
            if [ "$STATUS" = "RUNNING" ]; then
              break
            fi
            sleep 10
          done
          STATUS=$(aws apprunner describe-service --service-arn "$ARN" --query "Service.Status" --output text)
          if [ "$STATUS" = "RUNNING" ]; then
            echo "Service is RUNNING; attempting to start-deployment (will ignore errors)"
            set +e
            aws apprunner start-deployment --service-arn "$ARN"
            RC=$?
            set -e
            if [ $RC -ne 0 ]; then
              echo "start-deployment not allowed or failed (likely ongoing or auto-deploy enabled); continuing"
            fi
          else
            echo "Service not RUNNING after wait; continuing without start-deployment"
          fi
