# .github/workflows/deploy-app-runner.yml

name: Deploy Services to App Runner

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  id-token: write # Required for OIDC
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth-service, catalog-service, order-service, user-service]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: madeinworld/${{ matrix.service }}
          LATEST_TAG: latest
          SHA_TAG: ${{ github.sha }}
        run: |
          set -e
          BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          echo "Building image for $ECR_REPOSITORY with GIT_SHA=$GITHUB_SHA BUILD_TIME=$BUILD_TIME"
          docker build \
            --no-cache --pull \
            --build-arg GIT_SHA=$GITHUB_SHA \
            --build-arg BUILD_TIME=$BUILD_TIME \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$LATEST_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$SHA_TAG \
            ./backend/${{ matrix.service }}
          echo "Pushing tags: $LATEST_TAG and $SHA_TAG"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$LATEST_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$SHA_TAG
          echo "Resolving ECR digest for $SHA_TAG"
          DIGEST=$(aws ecr describe-images --repository-name "$ECR_REPOSITORY" --image-ids imageTag=$SHA_TAG --query 'imageDetails[0].imageDigest' --output text)
          echo "Image digest: $DIGEST"
          echo "ecr_image_sha_digest=$DIGEST" >> $GITHUB_OUTPUT

      - name: Wait for App Runner service to be RUNNING
        env:
          SERVICE_NAME: madeinworld-${{ matrix.service }}-dev
        run: |
          set -e
          ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$SERVICE_NAME'].ServiceArn | [0]" --output text)
          if [ -z "$ARN" ] || [ "$ARN" = "None" ]; then
            echo "No App Runner service found for $SERVICE_NAME" >&2
            exit 1
          fi
          echo "Service ARN: $ARN"
          echo "Waiting for service to be RUNNING (up to 10 minutes)"
          for i in {1..60}; do
            STATUS=$(aws apprunner describe-service --service-arn "$ARN" --query "Service.Status" --output text)
            echo "[pre-$i] Status: $STATUS"
            if [ "$STATUS" = "RUNNING" ]; then
              break
            fi
            sleep 10
          done
          STATUS=$(aws apprunner describe-service --service-arn "$ARN" --query "Service.Status" --output text)
          if [ "$STATUS" != "RUNNING" ]; then
            echo "Service did not reach RUNNING status; exiting"
            exit 1
          fi

      - name: Update App Runner image to commit SHA tag
        id: update-app-runner-image
        env:
          SERVICE_NAME: madeinworld-${{ matrix.service }}-dev
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: madeinworld/${{ matrix.service }}
          SHA_TAG: ${{ github.sha }}
        run: |
          set -e
          ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$SERVICE_NAME'].ServiceArn | [0]" --output text)
          NEW_IMAGE="$ECR_REGISTRY/$ECR_REPOSITORY:$SHA_TAG"
          echo "Updating service $SERVICE_NAME to image: $NEW_IMAGE"
          OP_ID=$(aws apprunner update-service \
            --service-arn "$ARN" \
            --source-configuration "{\"ImageRepository\":{\"ImageIdentifier\":\"$NEW_IMAGE\",\"ImageRepositoryType\":\"ECR\"}}" \
            --query 'OperationId' --output text)
          echo "Triggered update-service to SHA-tagged image: $NEW_IMAGE"
          echo "OperationId: $OP_ID"
          echo "op_id=$OP_ID" >> $GITHUB_OUTPUT

      - name: Wait for App Runner deployment to complete
        env:
          SERVICE_NAME: madeinworld-${{ matrix.service }}-dev
        run: |
          set -e
          ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$SERVICE_NAME'].ServiceArn | [0]" --output text)
          echo "Service ARN: $ARN"
          echo "Waiting for deployment to complete (up to 15 minutes)"
          # If we have an op_id from the previous step, use it to track progress; otherwise fall back to describe-service loop
          OP_ID="${{ steps.update-app-runner-image.outputs.op_id }}"
          if [ -n "$OP_ID" ] && [ "$OP_ID" != "None" ]; then
            echo "Tracking operation: $OP_ID"
            for i in {1..90}; do
              OP_STATUS=$(aws apprunner list-operations --service-arn "$ARN" --query "OperationSummaryList[?Id=='$OP_ID'].Status | [0]" --output text)
              IMG_ID=$(aws apprunner describe-service --service-arn "$ARN" --query "Service.SourceConfiguration.ImageRepository.ImageIdentifier" --output text)
              echo "[$i] Operation: $OP_STATUS | Image: $IMG_ID"
              if [ "$OP_STATUS" = "SUCCEEDED" ]; then
                echo "Deployment SUCCEEDED"
                break
              fi
              if [ "$OP_STATUS" = "FAILED" ] || [ "$OP_STATUS" = "ROLLBACK_SUCCEEDED" ] || [ "$OP_STATUS" = "CANCELLED" ]; then
                echo "Deployment did not succeed (status=$OP_STATUS). Printing diagnostics..." >&2
                aws apprunner describe-service --service-arn "$ARN" || true
                aws apprunner list-operations --service-arn "$ARN" --query "OperationSummaryList[?Id=='$OP_ID']" || true
                exit 1
              fi
              sleep 10
            done
          else
            echo "No operation id available; falling back to describe-service loop"
            for i in {1..90}; do
              STATUS=$(aws apprunner describe-service --service-arn "$ARN" --query "Service.Status" --output text)
              DEP_STATUS=$(aws apprunner describe-service --service-arn "$ARN" --query "Service.Deployments[0].Status" --output text 2>/dev/null || echo "None")
              IMG_ID=$(aws apprunner describe-service --service-arn "$ARN" --query "Service.SourceConfiguration.ImageRepository.ImageIdentifier" --output text)
              echo "[$i] Status: $STATUS | Deployment: $DEP_STATUS | Image: $IMG_ID"
              if [ "$DEP_STATUS" = "SUCCEEDED" ]; then
                echo "Deployment SUCCEEDED"
                break
              fi
              if [ "$DEP_STATUS" = "FAILED" ] || [ "$DEP_STATUS" = "CANCELLED" ] || [ "$DEP_STATUS" = "ROLLBACK_SUCCEEDED" ] || [ "$STATUS" = "DELETED" ] || [ "$STATUS" = "DELETE_IN_PROGRESS" ]; then
                echo "Deployment failed or service rolled back/deleted: Status=$STATUS, Deployment=$DEP_STATUS" >&2
                aws apprunner describe-service --service-arn "$ARN" || true
                exit 1
              fi
              sleep 10
            done
          fi
          echo "Final service description:"
          aws apprunner describe-service --service-arn "$ARN"
