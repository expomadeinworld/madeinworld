name: Smoke Test Auth-Service Readiness

on:
  workflow_run:
    workflows: ["Deploy Services to App Runner"]
    types: ["completed"]

permissions:
  id-token: write
  contents: read

jobs:
  auth-ready-check:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Resolve current auth-service URL
        id: resolve
        run: |
          set -e
          URL=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='madeinworld-auth-service-dev'].ServiceUrl | [0]" --output text)
          if [ -z "$URL" ] || [ "$URL" = "None" ]; then
            echo "Failed to resolve auth-service URL" >&2
            exit 1
          fi
          # Ensure HTTPS URL
          if [[ "$URL" != https://* ]]; then
            URL="https://$URL"
          fi
          echo "service_url=$URL" >> $GITHUB_OUTPUT

      - name: Wait for service to be running
        env:
          SERVICE_NAME: madeinworld-auth-service-dev
        run: |
          set -e
          ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$SERVICE_NAME'].ServiceArn | [0]" --output text)
          echo "Service ARN: $ARN"

          # Wait for service to be in RUNNING state
          max_wait=300  # 5 minutes
          start=$(date +%s)
          while true; do
            status=$(aws apprunner describe-service --service-arn "$ARN" --query "Service.Status" --output text)
            echo "Service status: $status"

            if [ "$status" = "RUNNING" ]; then
              echo "Service is running"
              break
            fi

            now=$(date +%s)
            elapsed=$((now-start))
            if [ $elapsed -ge $max_wait ]; then
              echo "Timeout waiting for service to be running after ${elapsed}s"
              aws apprunner describe-service --service-arn "$ARN" || true
              exit 1
            fi

            echo "Waiting for service to be running... (${elapsed}s elapsed)"
            sleep 10
          done

      - name: Quick probe of endpoints
        env:
          URL: ${{ steps.resolve.outputs.service_url }}
        run: |
          set -e
          echo "Probing: $URL"
          for P in / /health /live /ready; do
            echo "-- curl $URL$P"
            curl -s -i -L --max-time 10 "$URL$P" || true
            echo
          done

          echo "Resolved URL: $URL"

      - name: Wait for auth-service to be live
        env:
          URL: ${{ steps.resolve.outputs.service_url }}
        run: |
          set -e
          max_secs=300  # Reduced from 600s to 5 minutes
          start=$(date +%s)
          i=0
          while true; do
            i=$((i+1))
            code=$(curl -s -o /dev/null -w "%{http_code}" -L --max-time 10 "$URL/live" || echo "000")
            if [ "$code" = "200" ]; then
              echo "Auth service /live endpoint responding with 200"
              exit 0
            fi
            now=$(date +%s)
            elapsed=$((now-start))
            echo "Waiting for /live... attempt $i (elapsed ${elapsed}s) - got HTTP $code"
            if [ $elapsed -ge $max_secs ]; then
              echo "Timeout waiting for /live after ${elapsed}s"
              echo "Final probe attempt:"
              curl -v -L --max-time 10 "$URL/live" || true
              exit 1
            fi
            sleep 10
          done

      - name: Check /ready (DB ping)
        env:
          URL: ${{ steps.resolve.outputs.service_url }}
        run: |
          set -e
          echo "Testing /ready endpoint (database health check)..."

          # Get response details
          response=$(curl -s -L --max-time 10 "$URL/ready" || echo '{"error":"curl_failed"}')
          code=$(curl -s -o /dev/null -w "%{http_code}" -L --max-time 10 "$URL/ready" || echo "000")

          echo "HTTP Status: $code"
          echo "Response: $response"

          if [ "$code" = "200" ]; then
            echo "‚úÖ Auth service /ready OK - database connection healthy"
          elif [ "$code" = "503" ] && echo "$response" | grep -q "Database not initialized\|Service starting up"; then
            echo "‚ö†Ô∏è  Auth service is running but database is not yet available"
            echo "   This is expected during initial deployment or if database is temporarily unavailable"
            echo "   Service deployment is successful - database connectivity can be investigated separately"
          else
            echo "‚ùå Auth service /ready failed with unexpected HTTP $code"
            echo "Response details:"
            curl -v -L --max-time 10 "$URL/ready" || true
            exit 1
          fi

          echo "‚úÖ Smoke test passed - auth service is deployed and responding correctly"

      - name: Database connectivity diagnostics
        if: always()
        env:
          URL: ${{ steps.resolve.outputs.service_url }}
        run: |
          echo "=== Database Connectivity Diagnostics ==="
          echo "Checking if database connectivity issue needs investigation..."

          response=$(curl -s -L --max-time 10 "$URL/ready" || echo '{"error":"curl_failed"}')
          code=$(curl -s -o /dev/null -w "%{http_code}" -L --max-time 10 "$URL/ready" || echo "000")

          if [ "$code" = "503" ] && echo "$response" | grep -q "Database not initialized"; then
            echo "üîç Database connectivity issue detected. Possible causes:"
            echo "   1. AWS Secrets Manager access - check IAM permissions for App Runner instance role"
            echo "   2. Network connectivity - verify App Runner can reach Neon database"
            echo "   3. Database credentials - verify secrets in AWS Secrets Manager are correct"
            echo "   4. Database server status - check if Neon database is running"
            echo ""
            echo "üí° To investigate:"
            echo "   - Check App Runner service logs for detailed error messages"
            echo "   - Verify AWS Secrets Manager secrets: madeinworld/neon/db"
            echo "   - Test database connectivity from App Runner VPC"
            echo "   - Check Neon database status and connection limits"
          else
            echo "‚úÖ No database connectivity issues detected"
          fi

