name: Terraform Apply (App Runner)

on:
  push:
    branches: ["main"]
    paths:
      - 'terraform/app_runner/**'
      - '.github/workflows/terraform-app-runner-apply.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  apply:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/app_runner
    env:
      TF_IN_AUTOMATION: true
      TF_INPUT: false
      # Map GitHub Secrets to Terraform variables via TF_VAR_*
      TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
      TF_VAR_project: madeinworld
      TF_VAR_neon_db_host: ${{ secrets.NEON_DB_HOST }}
      TF_VAR_neon_db_user: ${{ secrets.NEON_DB_USER }}
      TF_VAR_neon_db_name: ${{ secrets.NEON_DB_NAME }}
      # Support both old and new secret names
      TF_VAR_secret_arn_db_password: ${{ secrets.SECRET_ARN_DB_PASSWORD || secrets.DB_SECRET_ARN }}
      TF_VAR_secret_arn_jwt_secret: ${{ secrets.SECRET_ARN_JWT_SECRET || secrets.JWT_SECRET_ARN }}
      TF_VAR_secret_arn_ses_user: ${{ secrets.SECRET_ARN_SES_USER || secrets.SES_SMTP_USER_ARN }}
      TF_VAR_secret_arn_ses_pass: ${{ secrets.SECRET_ARN_SES_PASS || secrets.SES_SMTP_PASS_ARN }}
      TF_VAR_ses_from_email: ${{ secrets.SES_FROM_EMAIL }}
      TF_VAR_canary_schedule_expression: ${{ secrets.CANARY_SCHEDULE_EXPRESSION || 'rate(2 minutes)' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Terraform Init
        run: terraform init -input=false

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Import existing infra (idempotent)
        run: |
          set -e
          # ECR repos
          for NAME in auth-service catalog-service order-service user-service; do
            echo "Importing ECR repo: $NAME (if exists)"
            terraform import -input=false -no-color "aws_ecr_repository.service_repos[\"$NAME\"]" "madeinworld/$NAME" || true
          done
          # IAM roles for App Runner and Synthetics
          terraform import -input=false -no-color aws_iam_role.apprunner_ecr_access_role madeinworld-apprunner-ecr-access-role || true
          terraform import -input=false -no-color aws_iam_role.apprunner_instance_role   madeinworld-apprunner-instance-role   || true
          terraform import -input=false -no-color aws_iam_role.synthetics_role           madeinworld-synthetics-role          || true
          # IAM policy for secrets access (compute ARN from current account)
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          terraform import -input=false -no-color aws_iam_policy.apprunner_secrets_policy "arn:aws:iam::${ACCOUNT_ID}:policy/${TF_VAR_project}-apprunner-secrets-policy" || true
          # S3 bucket for canary artifacts
          terraform import -input=false -no-color aws_s3_bucket.synthetics_artifacts     madeinworld-synthetics-artifacts     || true

      - name: Verify imports (state sanity check)
        run: |
          set -e
          echo "Terraform state after imports:"
          terraform state list || true
          missing=0
          for r in \
            aws_iam_role.apprunner_ecr_access_role \
            aws_iam_role.apprunner_instance_role \
            aws_iam_policy.apprunner_secrets_policy \
            aws_s3_bucket.synthetics_artifacts; do
            if ! terraform state list | grep -q "^$r$"; then
              echo "::error::Missing $r in state after import"
              missing=1
            fi
          done
          if [ "$missing" -ne 0 ]; then
            echo "::error::Import step did not attach all existing resources. Aborting before plan/apply to avoid 409 errors."
            exit 1
          fi

      - name: Terraform Plan
        run: terraform plan -input=false -no-color

      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve -no-color
