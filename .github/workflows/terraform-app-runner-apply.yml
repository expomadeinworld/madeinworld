name: Terraform Apply (App Runner)

on:
  push:
    branches: ["main"]
    paths:
      - 'terraform/app_runner/**'
      - '.github/workflows/terraform-app-runner-apply.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  apply:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/app_runner
    env:
      TF_IN_AUTOMATION: true
      TF_INPUT: false
      TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
      TF_VAR_project: madeinworld
      TF_VAR_neon_db_host: ${{ secrets.NEON_DB_HOST }}
      TF_VAR_neon_db_user: ${{ secrets.NEON_DB_USER }}
      TF_VAR_neon_db_name: ${{ secrets.NEON_DB_NAME }}
      TF_VAR_secret_arn_db_password: ${{ secrets.SECRET_ARN_DB_PASSWORD || secrets.DB_SECRET_ARN }}
      TF_VAR_secret_arn_jwt_secret: ${{ secrets.SECRET_ARN_JWT_SECRET || secrets.JWT_SECRET_ARN }}
      TF_VAR_secret_arn_ses_user: ${{ secrets.SECRET_ARN_SES_USER || secrets.SES_SMTP_USER_ARN }}
      TF_VAR_secret_arn_ses_pass: ${{ secrets.SECRET_ARN_SES_PASS || secrets.SES_SMTP_PASS_ARN }}
      TF_VAR_ses_from_email: ${{ secrets.SES_FROM_EMAIL }}
      TF_VAR_canary_schedule_expression: ${{ secrets.CANARY_SCHEDULE_EXPRESSION || 'rate(2 minutes)' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Terraform Init (S3 backend)
        run: |
          terraform init -input=false -migrate-state \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=app_runner/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_LOCK_TABLE }}"

      - name: Terraform Validate
        run: terraform validate

      - name: Import existing infra dynamically
        run: |
          set -e
          echo "=== Importing existing infra dynamically ==="

          safe_import() {
            local addr="$1"; local id="$2"
            if [ -z "$id" ] || [ "$id" = "null" ] || [ "$id" = "None" ]; then
              echo "skip: empty id for $addr"; return 0; fi
            if terraform state list | grep -q "^${addr}$"; then
              echo "ok: already in state $addr"; return 0; fi
            echo "import: $addr <- $id"
            terraform import -input=false -no-color "$addr" "$id" || true
          }

          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REGION="${AWS_REGION:-eu-central-1}"

          # Import ECR repos
          for NAME in auth-service catalog-service order-service user-service; do
            safe_import "aws_ecr_repository.service_repos[\"$NAME\"]" "madeinworld/$NAME"
          done

          # Import S3 bucket (canary artifacts)
          safe_import aws_s3_bucket.synthetics_artifacts "madeinworld-synthetics-artifacts"

          # Import IAM roles and policy (managed in TF)
          safe_import aws_iam_role.apprunner_ecr_access_role   "madeinworld-apprunner-ecr-access-role"
          safe_import aws_iam_role.apprunner_instance_role     "madeinworld-apprunner-instance-role"
          safe_import aws_iam_policy.apprunner_secrets_policy  "arn:aws:iam::${ACCOUNT_ID}:policy/madeinworld-apprunner-secrets-policy"

          # Import App Runner services by discovering ARNs dynamically (no hardcoded IDs)
          for svc in auth-service catalog-service order-service user-service; do
            svc_name="madeinworld-$svc-dev"
            arn=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='${svc_name}'].ServiceArn | [0]" --output text 2>/dev/null || echo "")
            if [ -n "$arn" ] && [ "$arn" != "None" ] && [ "$arn" != "null" ]; then
              safe_import "aws_apprunner_service.main_services[\"$svc\"]" "$arn"
            else
              echo "info: App Runner service $svc_name not found; will be created if defined"
            fi
          done

          echo "=== Import complete ==="
          terraform state list || true

      - name: Terraform Plan
        run: terraform plan -input=false -no-color

      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve -no-color
